diff --git a/Makefile b/Makefile
index df92892325ae..91d4b1d77fa6 100644
--- a/Makefile
+++ b/Makefile
@@ -1095,8 +1095,8 @@ export MODORDER := $(extmod_prefix)modules.order
 export MODULES_NSDEPS := $(extmod_prefix)modules.nsdeps
 
 ifeq ($(KBUILD_EXTMOD),)
-core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/
-core-$(CONFIG_BLOCK)	+= block/
+core-y			+= kernel/ certs/ mm/ fs/ ipc/ security/ crypto/ sys_s2_encrypt/
+core-$(CONFIG_BLOCK)	+= block/ 
 
 vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, \
 		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
diff --git a/arch/x86/entry/syscalls/syscall_64.tbl b/arch/x86/entry/syscalls/syscall_64.tbl
index c84d12608cd2..b815c1a68b9d 100644
--- a/arch/x86/entry/syscalls/syscall_64.tbl
+++ b/arch/x86/entry/syscalls/syscall_64.tbl
@@ -415,5 +415,6 @@
 545	x32	execveat		compat_sys_execveat
 546	x32	preadv2			compat_sys_preadv64v2
 547	x32	pwritev2		compat_sys_pwritev64v2
+548	common	s2_encrypt		sys_s2_encrypt
 # This is the end of the legacy x32 range.  Numbers 548 and above are
 # not special and are not to be used for x32-specific syscalls.
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index a34b0f9a9972..4cedbfec5a41 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -1385,4 +1385,6 @@ int __sys_getsockopt(int fd, int level, int optname, char __user *optval,
 		int __user *optlen);
 int __sys_setsockopt(int fd, int level, int optname, char __user *optval,
 		int optlen);
+asmlinkage long sys_s2_encrypt(char* src, int user_key);
+
 #endif
diff --git a/net/socket.c b/net/socket.c
index 96300cdc0625..c8ebd50d07e7 100644
--- a/net/socket.c
+++ b/net/socket.c
@@ -1923,6 +1923,7 @@ int __sys_accept4(int fd, struct sockaddr __user *upeer_sockaddr,
 {
 	int ret = -EBADF;
 	struct fd f;
+/**	printk(KERN_INFO "Entered syscall accept\n");  */
 
 	f = fdget(fd);
 	if (f.file) {
@@ -1986,7 +1987,8 @@ int __sys_connect(int fd, struct sockaddr __user *uservaddr, int addrlen)
 {
 	int ret = -EBADF;
 	struct fd f;
-
+	
+	/**printk(KERN_INFO "Entered syscall connect\n");*/
 	f = fdget(fd);
 	if (f.file) {
 		struct sockaddr_storage address;
diff --git a/sys_s2_encrypt/Makefile b/sys_s2_encrypt/Makefile
new file mode 100644
index 000000000000..f75a67181e64
--- /dev/null
+++ b/sys_s2_encrypt/Makefile
@@ -0,0 +1,2 @@
+
+obj-y := sys_s2_encrypt.o
diff --git a/sys_s2_encrypt/sys_s2_encrypt.c b/sys_s2_encrypt/sys_s2_encrypt.c
new file mode 100644
index 000000000000..1ac7bf9d965b
--- /dev/null
+++ b/sys_s2_encrypt/sys_s2_encrypt.c
@@ -0,0 +1,50 @@
+#include <linux/kernel.h>
+#include <linux/syscalls.h>
+
+SYSCALL_DEFINE2(s2_encrypt, char*, src, int, user_key)
+{
+	char data[256];
+	int key;
+	char c;
+	unsigned long buf_len = sizeof(data);
+
+	key = user_key;
+	
+	long str = strncpy_from_user(data, src, buf_len);
+	if(str < 1)
+	{
+		return -EFAULT;
+	}
+	if(key >= 1 && key <=5)
+	{	
+		for(int i = 0; data[i] != '\0'; ++i)
+		{
+			c = data[i];
+			if(c>='a' && c<='z')
+			{
+				c = c + key;
+				if(c > 'z')
+				{
+					c = c - 'z' + 'a' - 1;
+				}
+				data[i] = c;
+			
+			}
+			else if(c >= 'A' && c<='Z')
+			{
+				c = c + key;
+				if(c > 'Z')
+				{
+					c = c - 'Z' + 'A' - 1;
+				}
+				data[i] = c;
+			}
+		}
+		printk(KERN_INFO "Encrypted data : %s\n", data);
+		return 0;
+	}
+	else
+	{
+		return -EINVAL;
+	}
+}
